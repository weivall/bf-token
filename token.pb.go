// Code generated by protoc-gen-go.
// source: proto/token.proto
// DO NOT EDIT!

/*
Package token is a generated protocol buffer package.

It is generated from these files:
	proto/token.proto

It has these top-level messages:
	TokenRequest
	TokenResponse
	KeepAliveResponse
*/
package token

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type TokenResponse_LoginStatus int32

const (
	TokenResponse_SUCCESS                                 TokenResponse_LoginStatus = 0
	TokenResponse_INVALID_USERNAME_OR_PASSWORD            TokenResponse_LoginStatus = 1
	TokenResponse_ACCOUNT_NOW_LOCKED                      TokenResponse_LoginStatus = 2
	TokenResponse_ACCOUNT_ALREADY_LOCKED                  TokenResponse_LoginStatus = 3
	TokenResponse_PENDING_AUTH                            TokenResponse_LoginStatus = 4
	TokenResponse_TELBET_TERMS_CONDITIONS_NA              TokenResponse_LoginStatus = 5
	TokenResponse_DUPLICATE_CARDS                         TokenResponse_LoginStatus = 6
	TokenResponse_SECURITY_QUESTION_WRONG_3X              TokenResponse_LoginStatus = 7
	TokenResponse_KYC_SUSPEND                             TokenResponse_LoginStatus = 8
	TokenResponse_SUSPENDED                               TokenResponse_LoginStatus = 9
	TokenResponse_CLOSED                                  TokenResponse_LoginStatus = 10
	TokenResponse_SELF_EXCLUDED                           TokenResponse_LoginStatus = 11
	TokenResponse_INVALID_CONNECTIVITY_TO_REGULATOR_DK    TokenResponse_LoginStatus = 12
	TokenResponse_NOT_AUTHORIZED_BY_REGULATOR_DK          TokenResponse_LoginStatus = 13
	TokenResponse_INVALID_CONNECTIVITY_TO_REGULATOR_IT    TokenResponse_LoginStatus = 14
	TokenResponse_NOT_AUTHORIZED_BY_REGULATOR_IT          TokenResponse_LoginStatus = 15
	TokenResponse_SECURITY_RESTRICTED_LOCATION            TokenResponse_LoginStatus = 16
	TokenResponse_BETTING_RESTRICTED_LOCATION             TokenResponse_LoginStatus = 17
	TokenResponse_TRADING_MASTER                          TokenResponse_LoginStatus = 18
	TokenResponse_TRADING_MASTER_SUSPENDED                TokenResponse_LoginStatus = 19
	TokenResponse_AGENT_CLIENT_MASTER                     TokenResponse_LoginStatus = 20
	TokenResponse_AGENT_CLIENT_MASTER_SUSPENDED           TokenResponse_LoginStatus = 21
	TokenResponse_DANISH_AUTHORIZATION_REQUIRED           TokenResponse_LoginStatus = 22
	TokenResponse_SPAIN_MIGRATION_REQUIRED                TokenResponse_LoginStatus = 23
	TokenResponse_DENMARK_MIGRATION_REQUIRED              TokenResponse_LoginStatus = 24
	TokenResponse_SPANISH_TERMS_ACCEPTANCE_REQUIRED       TokenResponse_LoginStatus = 25
	TokenResponse_ITALIAN_CONTRACT_ACCEPTANCE_REQUIRED    TokenResponse_LoginStatus = 26
	TokenResponse_CERT_AUTH_REQUIRED                      TokenResponse_LoginStatus = 27
	TokenResponse_CHANGE_PASSWORD_REQUIRED                TokenResponse_LoginStatus = 28
	TokenResponse_PERSONAL_MESSAGE_REQUIRED               TokenResponse_LoginStatus = 29
	TokenResponse_INTERNATIONAL_TERMS_ACCEPTANCE_REQUIRED TokenResponse_LoginStatus = 30
	TokenResponse_EMAIL_LOGIN_NOT_ALLOWED                 TokenResponse_LoginStatus = 31
	TokenResponse_MULTIPLE_USERS_WITH_SAME_CREDENTIAL     TokenResponse_LoginStatus = 32
	TokenResponse_ACCOUNT_PENDING_PASSWORD_CHANGE         TokenResponse_LoginStatus = 33
	TokenResponse_TEMPORARY_BAN_TOO_MANY_REQUESTS         TokenResponse_LoginStatus = 34
)

var TokenResponse_LoginStatus_name = map[int32]string{
	0:  "SUCCESS",
	1:  "INVALID_USERNAME_OR_PASSWORD",
	2:  "ACCOUNT_NOW_LOCKED",
	3:  "ACCOUNT_ALREADY_LOCKED",
	4:  "PENDING_AUTH",
	5:  "TELBET_TERMS_CONDITIONS_NA",
	6:  "DUPLICATE_CARDS",
	7:  "SECURITY_QUESTION_WRONG_3X",
	8:  "KYC_SUSPEND",
	9:  "SUSPENDED",
	10: "CLOSED",
	11: "SELF_EXCLUDED",
	12: "INVALID_CONNECTIVITY_TO_REGULATOR_DK",
	13: "NOT_AUTHORIZED_BY_REGULATOR_DK",
	14: "INVALID_CONNECTIVITY_TO_REGULATOR_IT",
	15: "NOT_AUTHORIZED_BY_REGULATOR_IT",
	16: "SECURITY_RESTRICTED_LOCATION",
	17: "BETTING_RESTRICTED_LOCATION",
	18: "TRADING_MASTER",
	19: "TRADING_MASTER_SUSPENDED",
	20: "AGENT_CLIENT_MASTER",
	21: "AGENT_CLIENT_MASTER_SUSPENDED",
	22: "DANISH_AUTHORIZATION_REQUIRED",
	23: "SPAIN_MIGRATION_REQUIRED",
	24: "DENMARK_MIGRATION_REQUIRED",
	25: "SPANISH_TERMS_ACCEPTANCE_REQUIRED",
	26: "ITALIAN_CONTRACT_ACCEPTANCE_REQUIRED",
	27: "CERT_AUTH_REQUIRED",
	28: "CHANGE_PASSWORD_REQUIRED",
	29: "PERSONAL_MESSAGE_REQUIRED",
	30: "INTERNATIONAL_TERMS_ACCEPTANCE_REQUIRED",
	31: "EMAIL_LOGIN_NOT_ALLOWED",
	32: "MULTIPLE_USERS_WITH_SAME_CREDENTIAL",
	33: "ACCOUNT_PENDING_PASSWORD_CHANGE",
	34: "TEMPORARY_BAN_TOO_MANY_REQUESTS",
}
var TokenResponse_LoginStatus_value = map[string]int32{
	"SUCCESS":                                 0,
	"INVALID_USERNAME_OR_PASSWORD":            1,
	"ACCOUNT_NOW_LOCKED":                      2,
	"ACCOUNT_ALREADY_LOCKED":                  3,
	"PENDING_AUTH":                            4,
	"TELBET_TERMS_CONDITIONS_NA":              5,
	"DUPLICATE_CARDS":                         6,
	"SECURITY_QUESTION_WRONG_3X":              7,
	"KYC_SUSPEND":                             8,
	"SUSPENDED":                               9,
	"CLOSED":                                  10,
	"SELF_EXCLUDED":                           11,
	"INVALID_CONNECTIVITY_TO_REGULATOR_DK":    12,
	"NOT_AUTHORIZED_BY_REGULATOR_DK":          13,
	"INVALID_CONNECTIVITY_TO_REGULATOR_IT":    14,
	"NOT_AUTHORIZED_BY_REGULATOR_IT":          15,
	"SECURITY_RESTRICTED_LOCATION":            16,
	"BETTING_RESTRICTED_LOCATION":             17,
	"TRADING_MASTER":                          18,
	"TRADING_MASTER_SUSPENDED":                19,
	"AGENT_CLIENT_MASTER":                     20,
	"AGENT_CLIENT_MASTER_SUSPENDED":           21,
	"DANISH_AUTHORIZATION_REQUIRED":           22,
	"SPAIN_MIGRATION_REQUIRED":                23,
	"DENMARK_MIGRATION_REQUIRED":              24,
	"SPANISH_TERMS_ACCEPTANCE_REQUIRED":       25,
	"ITALIAN_CONTRACT_ACCEPTANCE_REQUIRED":    26,
	"CERT_AUTH_REQUIRED":                      27,
	"CHANGE_PASSWORD_REQUIRED":                28,
	"PERSONAL_MESSAGE_REQUIRED":               29,
	"INTERNATIONAL_TERMS_ACCEPTANCE_REQUIRED": 30,
	"EMAIL_LOGIN_NOT_ALLOWED":                 31,
	"MULTIPLE_USERS_WITH_SAME_CREDENTIAL":     32,
	"ACCOUNT_PENDING_PASSWORD_CHANGE":         33,
	"TEMPORARY_BAN_TOO_MANY_REQUESTS":         34,
}

func (x TokenResponse_LoginStatus) String() string {
	return proto.EnumName(TokenResponse_LoginStatus_name, int32(x))
}
func (TokenResponse_LoginStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 0} }

type KeepAliveResponse_Status int32

const (
	KeepAliveResponse_SUCCESS KeepAliveResponse_Status = 0
	KeepAliveResponse_FAIL    KeepAliveResponse_Status = 1
)

var KeepAliveResponse_Status_name = map[int32]string{
	0: "SUCCESS",
	1: "FAIL",
}
var KeepAliveResponse_Status_value = map[string]int32{
	"SUCCESS": 0,
	"FAIL":    1,
}

func (x KeepAliveResponse_Status) String() string {
	return proto.EnumName(KeepAliveResponse_Status_name, int32(x))
}
func (KeepAliveResponse_Status) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2, 0} }

type KeepAliveResponse_Error int32

const (
	KeepAliveResponse_INPUT_VALIDATION_ERROR KeepAliveResponse_Error = 0
	KeepAliveResponse_INTERNAL_ERROR         KeepAliveResponse_Error = 1
	KeepAliveResponse_NO_SESSION             KeepAliveResponse_Error = 2
)

var KeepAliveResponse_Error_name = map[int32]string{
	0: "INPUT_VALIDATION_ERROR",
	1: "INTERNAL_ERROR",
	2: "NO_SESSION",
}
var KeepAliveResponse_Error_value = map[string]int32{
	"INPUT_VALIDATION_ERROR": 0,
	"INTERNAL_ERROR":         1,
	"NO_SESSION":             2,
}

func (x KeepAliveResponse_Error) String() string {
	return proto.EnumName(KeepAliveResponse_Error_name, int32(x))
}
func (KeepAliveResponse_Error) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2, 1} }

type TokenRequest struct {
	FlushCache bool `protobuf:"varint,1,opt,name=flushCache" json:"flushCache,omitempty"`
}

func (m *TokenRequest) Reset()                    { *m = TokenRequest{} }
func (m *TokenRequest) String() string            { return proto.CompactTextString(m) }
func (*TokenRequest) ProtoMessage()               {}
func (*TokenRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type TokenResponse struct {
	SessionToken string                    `protobuf:"bytes,1,opt,name=sessionToken" json:"sessionToken,omitempty"`
	LoginStatus  TokenResponse_LoginStatus `protobuf:"varint,2,opt,name=loginStatus,enum=token.TokenResponse_LoginStatus" json:"loginStatus,omitempty"`
}

func (m *TokenResponse) Reset()                    { *m = TokenResponse{} }
func (m *TokenResponse) String() string            { return proto.CompactTextString(m) }
func (*TokenResponse) ProtoMessage()               {}
func (*TokenResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type KeepAliveResponse struct {
	Token   string                   `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
	Product string                   `protobuf:"bytes,2,opt,name=product" json:"product,omitempty"`
	Status  KeepAliveResponse_Status `protobuf:"varint,3,opt,name=status,enum=token.KeepAliveResponse_Status" json:"status,omitempty"`
	Error   KeepAliveResponse_Error  `protobuf:"varint,4,opt,name=error,enum=token.KeepAliveResponse_Error" json:"error,omitempty"`
}

func (m *KeepAliveResponse) Reset()                    { *m = KeepAliveResponse{} }
func (m *KeepAliveResponse) String() string            { return proto.CompactTextString(m) }
func (*KeepAliveResponse) ProtoMessage()               {}
func (*KeepAliveResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func init() {
	proto.RegisterType((*TokenRequest)(nil), "token.TokenRequest")
	proto.RegisterType((*TokenResponse)(nil), "token.TokenResponse")
	proto.RegisterType((*KeepAliveResponse)(nil), "token.KeepAliveResponse")
	proto.RegisterEnum("token.TokenResponse_LoginStatus", TokenResponse_LoginStatus_name, TokenResponse_LoginStatus_value)
	proto.RegisterEnum("token.KeepAliveResponse_Status", KeepAliveResponse_Status_name, KeepAliveResponse_Status_value)
	proto.RegisterEnum("token.KeepAliveResponse_Error", KeepAliveResponse_Error_name, KeepAliveResponse_Error_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for Token service

type TokenClient interface {
	GetToken(ctx context.Context, in *TokenRequest, opts ...grpc.CallOption) (*TokenResponse, error)
}

type tokenClient struct {
	cc *grpc.ClientConn
}

func NewTokenClient(cc *grpc.ClientConn) TokenClient {
	return &tokenClient{cc}
}

func (c *tokenClient) GetToken(ctx context.Context, in *TokenRequest, opts ...grpc.CallOption) (*TokenResponse, error) {
	out := new(TokenResponse)
	err := grpc.Invoke(ctx, "/token.Token/GetToken", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Token service

type TokenServer interface {
	GetToken(context.Context, *TokenRequest) (*TokenResponse, error)
}

func RegisterTokenServer(s *grpc.Server, srv TokenServer) {
	s.RegisterService(&_Token_serviceDesc, srv)
}

func _Token_GetToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenServer).GetToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/token.Token/GetToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenServer).GetToken(ctx, req.(*TokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Token_serviceDesc = grpc.ServiceDesc{
	ServiceName: "token.Token",
	HandlerType: (*TokenServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetToken",
			Handler:    _Token_GetToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor0,
}

func init() { proto.RegisterFile("proto/token.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 865 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x8c, 0x55, 0x5b, 0x6f, 0x1b, 0x37,
	0x13, 0x8d, 0x1c, 0x4b, 0x96, 0x46, 0xbe, 0xac, 0x69, 0x7f, 0xb6, 0xe2, 0x9b, 0x6c, 0xe5, 0x2b,
	0x12, 0xa0, 0x80, 0x0a, 0x24, 0x05, 0xf2, 0x5a, 0x9a, 0xcb, 0xc8, 0x84, 0x28, 0x52, 0x21, 0xb9,
	0x51, 0xd4, 0x17, 0x22, 0x4d, 0xb7, 0x8d, 0x51, 0xc3, 0x72, 0x2d, 0xb9, 0xbf, 0xa6, 0x2f, 0x7d,
	0xea, 0xdf, 0xec, 0x90, 0xab, 0x8b, 0xd5, 0x2a, 0x68, 0x9f, 0x96, 0x9c, 0x39, 0x43, 0xce, 0xcc,
	0xe1, 0x9c, 0x85, 0xdd, 0xbb, 0xfb, 0xd1, 0x64, 0xf4, 0xcd, 0x64, 0xf4, 0x4b, 0x7e, 0xdb, 0x8e,
	0x6b, 0x52, 0x8e, 0x9b, 0x56, 0x1b, 0x36, 0x5d, 0x58, 0x98, 0xfc, 0xd7, 0x87, 0x7c, 0x3c, 0x21,
	0x67, 0x00, 0x3f, 0xdd, 0x3c, 0x8c, 0x3f, 0xb3, 0x8f, 0x9f, 0x3e, 0xe7, 0x8d, 0xd2, 0x79, 0xe9,
	0x65, 0xd5, 0x3c, 0xb2, 0xb4, 0xfe, 0xa8, 0xc1, 0xd6, 0x34, 0x60, 0x7c, 0x37, 0xba, 0x1d, 0xe7,
	0xa4, 0x05, 0x9b, 0xe3, 0x7c, 0x3c, 0xbe, 0x1e, 0xdd, 0x46, 0x7b, 0x8c, 0xa9, 0x99, 0x25, 0x1b,
	0xb9, 0x84, 0xfa, 0xcd, 0xe8, 0xe7, 0xeb, 0x5b, 0x3b, 0xf9, 0x38, 0x79, 0x18, 0x37, 0xd6, 0x10,
	0xb2, 0xfd, 0xea, 0xbc, 0x5d, 0xe4, 0xb3, 0x74, 0x5c, 0x5b, 0x2e, 0x70, 0xe6, 0x71, 0x50, 0xeb,
	0xcf, 0x2a, 0xd4, 0x1f, 0x39, 0x49, 0x1d, 0x36, 0x6c, 0xc6, 0x18, 0xb7, 0x36, 0x79, 0x42, 0xce,
	0xe1, 0x44, 0xa8, 0xf7, 0x54, 0x8a, 0xd4, 0x67, 0x96, 0x1b, 0x45, 0x7b, 0xdc, 0x6b, 0xe3, 0xfb,
	0xd4, 0xda, 0x81, 0x36, 0x69, 0x52, 0x22, 0x07, 0x40, 0x28, 0x63, 0x3a, 0x53, 0xce, 0x2b, 0x3d,
	0xf0, 0x52, 0xb3, 0x2e, 0x4f, 0x93, 0x35, 0x72, 0x04, 0x07, 0x33, 0x3b, 0x95, 0x86, 0xd3, 0x74,
	0x38, 0xf3, 0x3d, 0x25, 0x09, 0x6c, 0xf6, 0xb9, 0x4a, 0x85, 0xea, 0x78, 0x9a, 0xb9, 0xab, 0x64,
	0x1d, 0xdb, 0x73, 0xe4, 0xb8, 0xbc, 0xe4, 0xce, 0x3b, 0x6e, 0x7a, 0xd6, 0x33, 0x8d, 0x6e, 0x27,
	0xb4, 0xb2, 0x5e, 0xd1, 0xa4, 0x4c, 0xf6, 0x60, 0x27, 0xcd, 0xfa, 0x52, 0x30, 0xea, 0xb8, 0x67,
	0xd4, 0xa4, 0x36, 0xa9, 0x84, 0x20, 0xcb, 0x59, 0x66, 0x84, 0x1b, 0xfa, 0x77, 0x19, 0xb7, 0x01,
	0xef, 0x07, 0x46, 0xe3, 0xb1, 0xaf, 0x3f, 0x24, 0x1b, 0x64, 0x07, 0xea, 0xdd, 0x21, 0xf3, 0x36,
	0xb3, 0xe1, 0xb6, 0xa4, 0x4a, 0xb6, 0xa0, 0x36, 0xdd, 0x60, 0x1a, 0x35, 0x02, 0x50, 0x61, 0x52,
	0x5b, 0x5c, 0x03, 0xd9, 0x85, 0x2d, 0xcb, 0xe5, 0x5b, 0xcf, 0x3f, 0x30, 0x99, 0x05, 0x77, 0x9d,
	0xbc, 0x84, 0xff, 0xcf, 0x6a, 0xc7, 0x74, 0x14, 0x67, 0x4e, 0xbc, 0x0f, 0x57, 0x39, 0xed, 0x0d,
	0xef, 0x64, 0x92, 0x3a, 0xec, 0x44, 0xda, 0x4d, 0x36, 0x91, 0xaa, 0x33, 0xa5, 0x5d, 0xac, 0x45,
	0x1b, 0xf1, 0x3d, 0x4f, 0xfd, 0xe5, 0x70, 0x19, 0xb3, 0xf5, 0xdf, 0x4e, 0x13, 0x2e, 0xd9, 0xfe,
	0xb7, 0xd3, 0x10, 0xb3, 0x13, 0x78, 0x99, 0x97, 0x6e, 0xb0, 0x72, 0x23, 0x98, 0x43, 0x20, 0x76,
	0x98, 0x86, 0x2e, 0x24, 0x09, 0x69, 0xc2, 0x31, 0xb6, 0xd3, 0x85, 0x1e, 0xaf, 0x02, 0xec, 0x12,
	0x02, 0xdb, 0xce, 0xd0, 0x48, 0x42, 0x8f, 0x5a, 0x6c, 0x7b, 0x42, 0xc8, 0x09, 0x34, 0x96, 0x6d,
	0x7e, 0xd1, 0xaf, 0x3d, 0x72, 0x08, 0x7b, 0xb4, 0xc3, 0x91, 0x50, 0x26, 0x45, 0xf8, 0x4c, 0xc3,
	0xf6, 0xc9, 0x05, 0x9c, 0xae, 0x70, 0x3c, 0x8a, 0xfd, 0x5f, 0x80, 0xa4, 0x54, 0x09, 0x7b, 0x35,
	0xaf, 0x2b, 0xe6, 0x81, 0xb9, 0xbd, 0xcb, 0x84, 0x41, 0xc8, 0x41, 0xb8, 0xdc, 0xf6, 0xa9, 0x50,
	0xbe, 0x27, 0x3a, 0xe6, 0x6f, 0xde, 0xc3, 0x40, 0x76, 0xca, 0x55, 0x8f, 0x9a, 0xee, 0x2a, 0x7f,
	0x83, 0x7c, 0x05, 0x17, 0x18, 0x1d, 0x6f, 0x28, 0x9e, 0x10, 0xbe, 0x3e, 0xde, 0x77, 0x54, 0x31,
	0xbe, 0x80, 0x3d, 0x8b, 0x34, 0x38, 0x64, 0x81, 0xaa, 0x40, 0x03, 0x16, 0xcb, 0xdc, 0x4a, 0xe4,
	0x51, 0x78, 0xd8, 0x8c, 0x9b, 0x82, 0x87, 0x85, 0xfd, 0x38, 0xa4, 0xc9, 0xae, 0xa8, 0xea, 0xf0,
	0xf9, 0x14, 0x2c, 0xbc, 0x27, 0xe4, 0x14, 0x9e, 0xf5, 0xb9, 0xb1, 0x5a, 0x51, 0xe9, 0x7b, 0x38,
	0x43, 0xd8, 0x97, 0x85, 0xfb, 0x94, 0x7c, 0x0d, 0x2f, 0x84, 0x72, 0x61, 0x90, 0x42, 0xfe, 0x88,
	0xf9, 0x72, 0xae, 0x67, 0xe4, 0x18, 0x0e, 0x79, 0x8f, 0x0a, 0x89, 0xac, 0x75, 0xb0, 0x2d, 0xf1,
	0x51, 0x48, 0xa9, 0x07, 0xe8, 0x6c, 0x92, 0x17, 0xf0, 0xbc, 0x97, 0x49, 0x27, 0xfa, 0x92, 0xc7,
	0xd1, 0xb4, 0x7e, 0x20, 0x30, 0x51, 0x1b, 0x26, 0x94, 0x61, 0x3c, 0xf2, 0x20, 0xa8, 0x4c, 0xce,
	0xc9, 0x73, 0x68, 0xce, 0x06, 0x71, 0x36, 0x74, 0xf3, 0xc4, 0x8b, 0x42, 0x92, 0x8b, 0x00, 0x72,
	0xbc, 0xd7, 0xd7, 0x86, 0x9a, 0xa1, 0xbf, 0xc4, 0xe6, 0x38, 0xad, 0x91, 0x46, 0x35, 0x8c, 0xf9,
	0xe0, 0xfb, 0xb1, 0x49, 0xab, 0xf5, 0xfb, 0x1a, 0xec, 0x76, 0xf3, 0xfc, 0x8e, 0xde, 0x5c, 0xff,
	0x96, 0xcf, 0x75, 0x6a, 0x1f, 0x0a, 0xc9, 0x9b, 0x0a, 0x54, 0xb1, 0x21, 0x0d, 0xd8, 0x40, 0x3d,
	0xfc, 0xf1, 0xe1, 0xd3, 0x24, 0xaa, 0x52, 0xcd, 0xcc, 0xb6, 0xe4, 0x0d, 0x54, 0xc6, 0x85, 0x5c,
	0x3d, 0x8d, 0x72, 0xd5, 0x9c, 0xca, 0xd5, 0x3f, 0x4e, 0x6e, 0x4f, 0xd5, 0x6a, 0x0a, 0x27, 0xdf,
	0x42, 0x39, 0xbf, 0xbf, 0x1f, 0xdd, 0x37, 0xd6, 0x63, 0xdc, 0xd9, 0x17, 0xe3, 0x78, 0x40, 0x99,
	0x02, 0xdc, 0x6a, 0x42, 0x65, 0x95, 0xb0, 0x55, 0x61, 0xfd, 0x2d, 0xb6, 0x36, 0x29, 0xb5, 0x3a,
	0x50, 0x8e, 0x01, 0x41, 0xb1, 0x84, 0xea, 0x67, 0xce, 0xc7, 0x29, 0x2d, 0x1e, 0x18, 0x37, 0x46,
	0x1b, 0x84, 0xe3, 0xb0, 0x4c, 0x79, 0x93, 0x53, 0x5b, 0x89, 0x6c, 0x03, 0x28, 0xed, 0x2d, 0x9e,
	0x17, 0x06, 0x6a, 0xed, 0xd5, 0x77, 0x50, 0x2e, 0x54, 0xf9, 0x0d, 0x54, 0x3b, 0xf9, 0xa4, 0x58,
	0xef, 0x2d, 0x8b, 0x71, 0xfc, 0x19, 0x1c, 0xed, 0xaf, 0x52, 0xe8, 0xd6, 0x93, 0x1f, 0x2a, 0xf1,
	0x17, 0xf2, 0xfa, 0xaf, 0x00, 0x00, 0x00, 0xff, 0xff, 0xb9, 0x1b, 0xdb, 0x5a, 0x57, 0x06, 0x00,
	0x00,
}
